#!/bin/bash

ETCDIR="/etc/vm"
ETCVMDIR="${ETCDIR}/guest.d"
DOMAIN=$(hostname -d)

_xml=$(virsh pool-dumpxml default)
_regex="\s*<path>([^<]+)</path>"
if [[ $_xml =~ $_regex ]]; then
	POOLDIR=${BASH_REMATCH[1]}
fi

usage() {
	echo "Usage: $0 {create <vm-name>|destroy <vm-name> [-y]|genmac <vm-name>}"
	exit 2
}

argmin() {
        if [[ ${#} -le $(expr ${1}) ]]; then
                usage
        fi
}

argmax() {
        if [[ $# -gt $(expr ${1} + 1) ]]; then
                usage
        fi
}

argcount() {
	argmin ${@}
	argmax ${@}
}

do_exists() {
        desc=$(virsh desc ${1} 2> /dev/null)
        if [ $? -eq 0 ]; then
                echo 1
        else
                echo 0
        fi
}

do_delete() {
	virsh destroy $1 2> /dev/null
	virsh undefine $1 2> /dev/null
	virsh vol-delete $1.img --pool default 2> /dev/null
	ssh-keygen -f "/home/vm/.ssh/known_hosts" -R "vm-storage" 2> /dev/null
}

genmac() {
	fqdn="${1}.${DOMAIN}"
	mac=$(echo ${fqdn} | md5sum | sed 's/^\(..\)\(..\)\(..\)\(..\)\(..\).*$/02:\1:\2:\3:\4:\5/')
	echo $mac
}

build() {
	firstboot_options=""
        if [[ -x "${ETCDIR}/scripts/firstboot.sh" ]]; then
		firstboot_options="--firstboot ${ETCDIR}/scripts/firstboot.sh"
        fi
	if [[ -x "${ETCVMDIR}/${1}/scripts/firstboot.sh" ]]; then
		firstboot_options="${firstboot_options} --firstboot ${ETCVMDIR}/${1}/scripts/firstboot.sh"
	fi

	virt-builder debian-10 \
		--hostname ${1} \
		--output ${POOLDIR}/${1}.img \
	        --ssh-inject root:file:/home/vm/.ssh/id_rsa.pub \
		--copy-in ${ETCDIR}/template/etc:/ \
		--edit "/etc/hosts:s/%VMNAME%/${1}/" \
		--edit "/etc/hosts:s/%VMNAME%/${1}/" \
		${firstboot_options} \
		--install sudo,qemu-guest-agent \
	        --root-password disabled
#		--update
}

modify() {
	# modifies image according to configuration
	tardir="$(mktemp -d)"
	tardest="$(mktemp -d)"
	echo -n "Adding files from ${ETCDIR}/template/? "
	if [[ -e "${ETCDIR}/template/" ]]; then
		cp -aT "${ETCDIR}/template/" ${tardest}/
		echo "OK"
	else
		echo "None found"
	fi
	echo -n "Adding files from ${ETCVMDIR}/${1}/template/? "
	if [[ -e "${ETCVMDIR}/${1}/template/" ]]; then
		cp -aT "${ETCVMDIR}/${1}/template/" ${tardest}/
		echo "OK"
	else
		echo "None found"
	fi

	echo "Creating tar archive ${tardir}/template.tar"
	tar -cf ${tardir}/template.tar -C ${tardest} .

	echo "Copying tar archive to vm"
	guestfish --rw -i tar-in -d ${1} ${tardir}/template.tar /


	# Cleanup
	rm -r ${tardir}
	rm -r ${tardest}

	# Run post-modify scripts
	if [[ -x "${ETCVMDIR}/${1}/scripts/post-modify.sh" ]]; then
		echo "Running post-modify script '${ETCVMDIR}/${1}/scripts/post-modify.sh'"
		${ETCDIR}/guest.d/${1}/scripts/post-modify.sh ${1}
	fi
}

define() {
	mac=$(genmac ${1})
	xmlfile=$(mktemp)
	virt-install \
		--autostart \
		--import \
		--name=${1} \
		--arch x86_64 \
		--memory=2048 \
		--vcpus=2 \
		--disk path=${POOLDIR}/${1}.img,bus=virtio,cache=none \
		--os-type linux \
		--os-variant debian10 \
		--virt-type=kvm \
		--controller usb,model=none \
		--graphics none \
		--network bridge=br0,mac=${mac},model=virtio \
		--print-xml > ${xmlfile}
	virsh define ${xmlfile}
	rm ${xmlfile}

	updatehostsfile
}

undefine() {
	virsh undefine ${1}

	updatehostsfile
}

create() {
        if [[ $(do_exists ${1}) -eq 1 ]]; then
		exists ${1}
		exit 1
	fi
	build ${1}
	define ${1}
	modify ${1}
}

delete() {
	if [[ $(do_exists ${1}) -eq 1 ]]; then
		ask=1
		if [ "$#" -gt 1 ]; then
			if [ "${2}" = "-y" ]; then
				ask=0
			fi
		fi
		if [ ${ask} -eq 1 ]; then
			read -r -p "Are you sure you want to destroy vm ${1}? [y/N] " response
		else
			response="y"
		fi
		if [[ "${response}" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
			do_delete ${1}
		else
			exit 1
		fi
	else
		exists ${1}
		exit 1
	fi
}

exists() {
	if [[ $(do_exists ${1}) -eq 1 ]]; then
		echo "VM ${1} exists"
	else
		echo "VM ${1} does not exist"
	fi
}

updatehostsfile() {
	echo -e "# This file is auto-generated by ${0}. Please don't edit manually\n" > ${ETCDIR}/ansible/hosts
	virsh list --all --name >> ${ETCDIR}/ansible/hosts
}

provision() {
	updatehostsfile

	virsh start $1

	printf "%s" "waiting for ${1}.${DOMAIN}"
	while ! ping -c 1 -n -w 1 ${1}.${DOMAIN} &> /dev/null
	do
		printf "%c" "."
		sleep 2
	done
	printf "\n%s\n"  "${1}.${DOMAIN} is online"

	if [[ -e "${ETCDIR}/ansible/all.yml" ]]; then
		echo "Running Ansible Playbook ${ETCDIR}/ansible/all.yml"
		ansible-playbook -i ${ETCDIR}/ansible/hosts ${ETCDIR}/ansible/all.yml
	fi
	if [[ -e "${ETCDIR}/ansible/${1}.yml" ]]; then
		echo "Running Ansible Playbook ${ETCVMDIR}/ansible/${1}.yml"
                ansible-playbook -i ${ETCDIR}/ansible/hosts ${ETCDIR}/ansible/${1}.yml
        fi
}

verb=${1}
shift
case "${verb}" in
genmac)
	argcount 1 $@
	genmac $1
        ;;
define)
	argcount 1 $@
	define $1
	;;
undefine)
	argcount 1 $@
	undefine $1
	;;
modify)
	argcount 1 $@
	modify $1
	;;
create)
	argcount 1 $@
	create $1
	;;
list)
	argcount 0 $@
	virsh list --all
	;;
start)
	argcount 1 $@
	virsh start $1
	;;
stop)
	argcount 1 $@
	virsh shutdown $1
	;;
provision)
	argcount 1 $@
	provision $1
	;;
exists)
	argcount 1 $@
	exists $1
	;;
delete)
	argmin 1 $@
	argmax 2 $@
	delete $@
	;;
*)	echo "Usage: $0 {create <vm-name>|delete <vm-name> [-y]|genmac <vm-name>}"
        exit 2
        ;;
esac

